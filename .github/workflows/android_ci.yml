# A revised and optimized GitHub Actions workflow for building and testing an Android app.
name: Android CI

# This section defines the triggers for the workflow.
# It's now more specific to prevent redundant runs.
on:
  # Run on pushes to the main and develop branches
  push:
    branches: [ "main", "develop" ]
  # Run on pull requests that target the main branch
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    name: Build & Test Android App
    runs-on: ubuntu-latest # Use 'latest' for the most up-to-date runner environment

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # This official Gradle action safely handles caching for dependencies, wrappers, and build configurations.
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      # The gradlew file is at the root level, so we don't need to cd into CleverFerret
      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Build project
        # We add --stacktrace to get more detailed error logs if the build fails.
        run: ./gradlew build --stacktrace

      - name: Run lint checks
        run: ./gradlew lint --stacktrace
        # 'continue-on-error' prevents the entire workflow from failing for minor lint issues.
        continue-on-error: true

      - name: Run unit tests
        run: ./gradlew testDebugUnitTest --stacktrace

      - name: Generate JaCoCo test coverage report
        run: ./gradlew jacocoTestReport --stacktrace

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v3
        with:
          # The path is now relative to the root directory.
          files: ./CleverFerret/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
          fail_ci_if_error: false # Optional: prevents CI failure if Codecov upload fails

      # The following steps set up and run instrumentation tests on a virtual device.
      - name: Enable KVM for hardware acceleration
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: AVD (Android Virtual Device) cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-api-30

      - name: Create AVD and generate snapshot for caching
        # This step runs ONLY if the AVD cache from the previous step was not found.
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -no-boot-anim -no-audio
          disable-animations: false
          script: echo "AVD snapshot created."

      - name: Run instrumentation tests on emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -no-boot-anim -no-audio
          disable-animations: true
          # This script command runs your instrumented tests.
          script: ./gradlew connectedDebugAndroidTest --stacktrace
