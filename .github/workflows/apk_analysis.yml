# APK Analysis and Optimization Workflow
# Analyzes APK size, performance, and provides optimization recommendations

name: APK Analysis & Optimization

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      analysis_level:
        description: 'Analysis depth level'
        required: true
        default: 'standard'
        type: choice
        options:
        - quick
        - standard
        - comprehensive

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
  JAVA_TOOL_OPTIONS: "-Xmx4g"

jobs:
  # Build APKs for analysis
  build-apks:
    name: Build APKs for Analysis
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    strategy:
      matrix:
        variant: [debug, release]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: ${{ github.event_name == 'pull_request' }}

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          packages: |
            platform-tools
            platforms;android-34
            build-tools;34.0.0

      - name: Accept Android SDK Licenses
        run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true

      - name: Extract version information
        id: version
        run: |
          version_name=$(grep -oP 'versionName = "\K[^"]*' CleverFerret/build.gradle.kts)
          version_code=$(grep -oP 'versionCode = \K[0-9]*' CleverFerret/build.gradle.kts)
          echo "version=${version_name}" >> $GITHUB_OUTPUT
          echo "Version: ${version_name} (${version_code})"

      # Build APK with detailed logging
      - name: Build ${{ matrix.variant }} APK
        run: |
          echo "Building ${{ matrix.variant }} APK..."
          if [[ "${{ matrix.variant }}" == "release" ]]; then
            ./gradlew assembleRelease --stacktrace --info
          else
            ./gradlew assembleDebug --stacktrace --info
          fi

      # Analyze APK structure
      - name: Analyze APK structure
        run: |
          apk_path="CleverFerret/build/outputs/apk/${{ matrix.variant }}"
          apk_file=$(find "$apk_path" -name "*.apk" -type f | head -1)
          
          if [[ -f "$apk_file" ]]; then
            echo "## APK Analysis - ${{ matrix.variant }}" > apk_analysis_${{ matrix.variant }}.md
            echo "" >> apk_analysis_${{ matrix.variant }}.md
            
            # Basic file information
            echo "### Basic Information" >> apk_analysis_${{ matrix.variant }}.md
            echo "- **File**: $(basename "$apk_file")" >> apk_analysis_${{ matrix.variant }}.md
            echo "- **Size**: $(ls -lh "$apk_file" | awk '{print $5}')" >> apk_analysis_${{ matrix.variant }}.md
            echo "- **Path**: $apk_file" >> apk_analysis_${{ matrix.variant }}.md
            echo "" >> apk_analysis_${{ matrix.variant }}.md
            
            # APK contents using aapt
            echo "### APK Contents Summary" >> apk_analysis_${{ matrix.variant }}.md
            echo "\`\`\`" >> apk_analysis_${{ matrix.variant }}.md
            $ANDROID_HOME/build-tools/34.0.0/aapt dump badging "$apk_file" | head -20 >> apk_analysis_${{ matrix.variant }}.md
            echo "\`\`\`" >> apk_analysis_${{ matrix.variant }}.md
            echo "" >> apk_analysis_${{ matrix.variant }}.md
            
            # Permissions
            echo "### Permissions" >> apk_analysis_${{ matrix.variant }}.md
            echo "\`\`\`" >> apk_analysis_${{ matrix.variant }}.md
            $ANDROID_HOME/build-tools/34.0.0/aapt dump permissions "$apk_file" >> apk_analysis_${{ matrix.variant }}.md
            echo "\`\`\`" >> apk_analysis_${{ matrix.variant }}.md
            echo "" >> apk_analysis_${{ matrix.variant }}.md
            
            # Checksums
            echo "### File Integrity" >> apk_analysis_${{ matrix.variant }}.md
            echo "- **SHA256**: $(sha256sum "$apk_file" | cut -d' ' -f1)" >> apk_analysis_${{ matrix.variant }}.md
            echo "- **MD5**: $(md5sum "$apk_file" | cut -d' ' -f1)" >> apk_analysis_${{ matrix.variant }}.md
          fi

      # Upload APK and analysis
      - name: Upload APK and analysis
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ matrix.variant }}-analysis-${{ github.sha }}
          path: |
            CleverFerret/build/outputs/apk/${{ matrix.variant }}/*.apk
            apk_analysis_${{ matrix.variant }}.md
          retention-days: 30

  # Detailed APK size analysis
  apk-size-analysis:
    name: APK Size Analysis
    runs-on: ubuntu-latest
    needs: build-apks
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download APK artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: apk-*-analysis-${{ github.sha }}
          path: ./apks

      # Compare APK sizes
      - name: Compare APK sizes
        run: |
          echo "## 📦 APK Size Analysis" > size_analysis.md
          echo "" >> size_analysis.md
          echo "Generated: $(date)" >> size_analysis.md
          echo "" >> size_analysis.md
          
          echo "### APK Size Comparison" >> size_analysis.md
          echo "| Variant | Size (MB) | Size (Bytes) | File |" >> size_analysis.md
          echo "|---------|-----------|--------------|------|" >> size_analysis.md
          
          for apk in $(find ./apks -name "*.apk" -type f); do
            variant=$(echo "$apk" | grep -oP '(debug|release)')
            size_bytes=$(stat -c%s "$apk")
            size_mb=$(echo "scale=2; $size_bytes / 1048576" | bc)
            filename=$(basename "$apk")
            echo "| $variant | $size_mb MB | $size_bytes | $filename |" >> size_analysis.md
          done
          
          echo "" >> size_analysis.md
          
          # Size recommendations
          echo "### Size Optimization Recommendations" >> size_analysis.md
          echo "" >> size_analysis.md
          
          release_apk=$(find ./apks -name "*release*.apk" -type f | head -1)
          if [[ -f "$release_apk" ]]; then
            release_size=$(stat -c%s "$release_apk")
            release_mb=$(echo "scale=2; $release_size / 1048576" | bc)
            
            echo "**Release APK Size**: ${release_mb} MB" >> size_analysis.md
            echo "" >> size_analysis.md
            
            if (( $(echo "$release_mb > 50" | bc -l) )); then
              echo "⚠️ **Large APK Warning**: Release APK is over 50MB" >> size_analysis.md
              echo "- Consider using APK splitting" >> size_analysis.md
              echo "- Review asset optimization" >> size_analysis.md
              echo "- Enable resource shrinking" >> size_analysis.md
            elif (( $(echo "$release_mb > 20" | bc -l) )); then
              echo "💡 **Optimization Opportunity**: Release APK could be optimized" >> size_analysis.md
              echo "- Review dependency usage" >> size_analysis.md
              echo "- Consider ProGuard/R8 optimizations" >> size_analysis.md
              echo "- Optimize image assets" >> size_analysis.md
            else
              echo "✅ **Good Size**: Release APK size is reasonable" >> size_analysis.md
            fi
          fi
          
          echo "" >> size_analysis.md
          
          # Historical comparison if available
          echo "### Historical Size Tracking" >> size_analysis.md
          echo "Track APK size changes over time to identify size regressions." >> size_analysis.md
          echo "" >> size_analysis.md
          echo "Current release size: ${release_mb:-Unknown} MB" >> size_analysis.md

      # Dependency analysis
      - name: Analyze dependencies contribution
        run: |
          echo "" >> size_analysis.md
          echo "### Dependency Analysis" >> size_analysis.md
          echo "" >> size_analysis.md
          
          # Get dependency sizes from build reports
          if [[ -d "CleverFerret/build/reports" ]]; then
            echo "Dependencies analysis available in build reports." >> size_analysis.md
          else
            echo "Run \`./gradlew assembleRelease --scan\` to get detailed dependency analysis." >> size_analysis.md
          fi
          
          echo "" >> size_analysis.md
          echo "### Recommended Tools for Size Analysis" >> size_analysis.md
          echo "- **Android Studio APK Analyzer**: Detailed breakdown of APK contents" >> size_analysis.md
          echo "- **Gradle Build Scans**: Dependency size analysis" >> size_analysis.md
          echo "- **Bundle Tool**: For app bundle analysis" >> size_analysis.md

      - name: Upload size analysis
        uses: actions/upload-artifact@v4
        with:
          name: apk-size-analysis-${{ github.sha }}
          path: size_analysis.md
          retention-days: 30

  # Performance analysis
  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: build-apks
    if: github.event.inputs.analysis_level != 'quick'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          packages: |
            platform-tools
            platforms;android-34
            build-tools;34.0.0

      # Build performance analysis
      - name: Analyze build performance
        run: |
          echo "## ⚡ Build Performance Analysis" > performance_analysis.md
          echo "" >> performance_analysis.md
          echo "Generated: $(date)" >> performance_analysis.md
          echo "" >> performance_analysis.md
          
          # Run build with profiling
          echo "### Build Time Analysis" >> performance_analysis.md
          
          start_time=$(date +%s.%N)
          ./gradlew clean assembleRelease --profile --build-cache
          end_time=$(date +%s.%N)
          
          build_duration=$(echo "$end_time - $start_time" | bc)
          
          echo "- **Total Build Time**: ${build_duration} seconds" >> performance_analysis.md
          echo "" >> performance_analysis.md
          
          # Analyze build profile
          profile_dir="build/reports/profile"
          if [[ -d "$profile_dir" ]]; then
            latest_profile=$(find "$profile_dir" -name "*.html" | head -1)
            if [[ -f "$latest_profile" ]]; then
              echo "- **Build Profile**: Available in artifacts" >> performance_analysis.md
              cp "$latest_profile" build_profile.html
            fi
          fi
          
          echo "" >> performance_analysis.md
          echo "### Performance Recommendations" >> performance_analysis.md
          echo "" >> performance_analysis.md
          
          if (( $(echo "$build_duration > 300" | bc -l) )); then
            echo "⚠️ **Slow Build Warning**: Build took over 5 minutes" >> performance_analysis.md
            echo "- Consider enabling Gradle daemon" >> performance_analysis.md
            echo "- Use parallel execution" >> performance_analysis.md
            echo "- Increase JVM heap size" >> performance_analysis.md
          elif (( $(echo "$build_duration > 120" | bc -l) )); then
            echo "💡 **Optimization Opportunity**: Build could be faster" >> performance_analysis.md
            echo "- Enable build cache" >> performance_analysis.md
            echo "- Use incremental compilation" >> performance_analysis.md
            echo "- Consider modularization" >> performance_analysis.md
          else
            echo "✅ **Good Performance**: Build time is reasonable" >> performance_analysis.md
          fi

      - name: Upload performance analysis
        uses: actions/upload-artifact@v4
        with:
          name: performance-analysis-${{ github.sha }}
          path: |
            performance_analysis.md
            build_profile.html
          retention-days: 30

  # Security analysis
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: build-apks
    if: github.event.inputs.analysis_level == 'comprehensive'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download APK artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: apk-*-analysis-${{ github.sha }}
          path: ./apks

      # APK security analysis
      - name: Analyze APK security
        run: |
          echo "## 🔒 Security Analysis" > security_analysis.md
          echo "" >> security_analysis.md
          echo "Generated: $(date)" >> security_analysis.md
          echo "" >> security_analysis.md
          
          release_apk=$(find ./apks -name "*release*.apk" -type f | head -1)
          
          if [[ -f "$release_apk" ]]; then
            echo "### APK Security Features" >> security_analysis.md
            echo "" >> security_analysis.md
            
            # Check signing
            echo "#### Signing Information" >> security_analysis.md
            echo "\`\`\`" >> security_analysis.md
            $ANDROID_HOME/build-tools/34.0.0/aapt dump badging "$release_apk" | grep -E "(application-label|package:|uses-permission)" >> security_analysis.md
            echo "\`\`\`" >> security_analysis.md
            echo "" >> security_analysis.md
            
            # Permissions analysis
            echo "#### Permissions Analysis" >> security_analysis.md
            permissions=$($ANDROID_HOME/build-tools/34.0.0/aapt dump permissions "$release_apk" | wc -l)
            echo "- **Total Permissions**: $permissions" >> security_analysis.md
            echo "" >> security_analysis.md
            
            # Security recommendations
            echo "### Security Recommendations" >> security_analysis.md
            echo "- ✅ APK is signed (required for installation)" >> security_analysis.md
            echo "- 💡 Review permissions regularly" >> security_analysis.md
            echo "- 🔍 Use dependency vulnerability scanning" >> security_analysis.md
            echo "- 🛡️ Enable ProGuard/R8 for code obfuscation" >> security_analysis.md
          fi

      - name: Upload security analysis
        uses: actions/upload-artifact@v4
        with:
          name: security-analysis-${{ github.sha }}
          path: security_analysis.md
          retention-days: 30

  # Generate comprehensive report
  generate-report:
    name: Generate Comprehensive Report
    runs-on: ubuntu-latest
    needs: [build-apks, apk-size-analysis, performance-analysis, security-analysis]
    if: always()
    
    steps:
      - name: Download all analysis artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*analysis*-${{ github.sha }}"
          path: ./analysis-results

      # Create comprehensive report
      - name: Create comprehensive report
        run: |
          echo "# 📊 Universal Media Library - APK Analysis Report" > comprehensive_report.md
          echo "" >> comprehensive_report.md
          echo "**Version**: ${{ needs.build-apks.outputs.version }}" >> comprehensive_report.md
          echo "**Analysis Date**: $(date)" >> comprehensive_report.md
          echo "**Commit**: ${{ github.sha }}" >> comprehensive_report.md
          echo "**Trigger**: ${{ github.event_name }}" >> comprehensive_report.md
          echo "" >> comprehensive_report.md
          
          # Include all analysis results
          for analysis_file in $(find ./analysis-results -name "*.md" -type f); do
            echo "---" >> comprehensive_report.md
            echo "" >> comprehensive_report.md
            cat "$analysis_file" >> comprehensive_report.md
            echo "" >> comprehensive_report.md
          done
          
          # Summary and next steps
          echo "---" >> comprehensive_report.md
          echo "" >> comprehensive_report.md
          echo "## 🎯 Summary and Next Steps" >> comprehensive_report.md
          echo "" >> comprehensive_report.md
          echo "### Completed Analysis" >> comprehensive_report.md
          echo "- [x] APK size analysis" >> comprehensive_report.md
          echo "- [x] Build performance analysis" >> comprehensive_report.md
          echo "- [x] Security analysis" >> comprehensive_report.md
          echo "" >> comprehensive_report.md
          echo "### Recommended Actions" >> comprehensive_report.md
          echo "1. Review size optimization recommendations" >> comprehensive_report.md
          echo "2. Implement performance improvements" >> comprehensive_report.md
          echo "3. Address any security concerns" >> comprehensive_report.md
          echo "4. Monitor metrics over time" >> comprehensive_report.md
          echo "" >> comprehensive_report.md
          echo "### Tools for Further Analysis" >> comprehensive_report.md
          echo "- Android Studio APK Analyzer" >> comprehensive_report.md
          echo "- Gradle Build Scans" >> comprehensive_report.md
          echo "- Google Play Console (for published apps)" >> comprehensive_report.md

      # Create summary for GitHub
      - name: Create GitHub summary
        run: |
          echo "## 📊 APK Analysis Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ needs.build-apks.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Analysis Level**: ${{ github.event.inputs.analysis_level || 'standard' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Reports" >> $GITHUB_STEP_SUMMARY
          find ./analysis-results -name "*.md" -type f | while read file; do
            name=$(basename "$file" .md)
            echo "- $name" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Stats" >> $GITHUB_STEP_SUMMARY
          
          # Get APK sizes if available
          size_file=$(find ./analysis-results -name "*size*analysis*.md" -type f | head -1)
          if [[ -f "$size_file" ]]; then
            release_size=$(grep -oP "release.*?(\d+\.?\d*) MB" "$size_file" | head -1 | grep -oP "\d+\.?\d*" || echo "Unknown")
            echo "- Release APK size: ${release_size} MB" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-analysis-report-${{ github.sha }}
          path: |
            comprehensive_report.md
            ./analysis-results/**
          retention-days: 90